// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file oidc/v1/oidc.proto (package oidc.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Spec: [OpenID Connect Core 1.0 Section 3.1.2.1.](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest)
 *
 * @generated from message oidc.v1.AuthenticateRequest
 */
export class AuthenticateRequest extends Message<AuthenticateRequest> {
  /**
   * scopes MUST contains `openid` scope.
   *
   * @generated from field: repeated string scopes = 1;
   */
  scopes: string[] = [];

  /**
   * Supported type is only `code` (Authorization Code Flow)
   *
   * @generated from field: repeated string response_types = 2;
   */
  responseTypes: string[] = [];

  /**
   * OAuth 2.0 Client identifier
   *
   * @generated from field: string client_id = 3;
   */
  clientId = "";

  /**
   * Redirection URI to which the response will be sent.
   * This URI MUST exactly match one of the Redirection URI values for the Client pre-registered at the OpenID Provider/
   *
   * @generated from field: string redirect_uri = 4;
   */
  redirectUri = "";

  /**
   * Whether user consents to authorize/authenticate the client.
   *
   * @generated from field: bool consented = 5;
   */
  consented = false;

  constructor(data?: PartialMessage<AuthenticateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "oidc.v1.AuthenticateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "scopes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "response_types", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "redirect_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "consented", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthenticateRequest {
    return new AuthenticateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthenticateRequest {
    return new AuthenticateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthenticateRequest {
    return new AuthenticateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AuthenticateRequest | PlainMessage<AuthenticateRequest> | undefined, b: AuthenticateRequest | PlainMessage<AuthenticateRequest> | undefined): boolean {
    return proto3.util.equals(AuthenticateRequest, a, b);
  }
}

/**
 * Spec: [OpenID Connect Core 1.0 Section 3.1.2.6.](http://openid-foundation-japan.github.io/openid-connect-core-1_0.ja.html#AuthResponse)
 *
 * @generated from message oidc.v1.AuthenticateResponse
 */
export class AuthenticateResponse extends Message<AuthenticateResponse> {
  /**
   * OAuth 2.0 Authorization Code
   *
   * @generated from field: string code = 1;
   */
  code = "";

  constructor(data?: PartialMessage<AuthenticateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "oidc.v1.AuthenticateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthenticateResponse {
    return new AuthenticateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthenticateResponse {
    return new AuthenticateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthenticateResponse {
    return new AuthenticateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AuthenticateResponse | PlainMessage<AuthenticateResponse> | undefined, b: AuthenticateResponse | PlainMessage<AuthenticateResponse> | undefined): boolean {
    return proto3.util.equals(AuthenticateResponse, a, b);
  }
}

/**
 * Spec: [OpenID Connect Core 1.0 Section 3.1.3.1.](http://openid-foundation-japan.github.io/openid-connect-core-1_0.ja.html#TokenRequest)
 *
 * @generated from message oidc.v1.ExchangeRequest
 */
export class ExchangeRequest extends Message<ExchangeRequest> {
  /**
   * Grant type MUST be `authorization_code`
   *
   * @generated from field: string grant_type = 1;
   */
  grantType = "";

  /**
   * OAuth 2.0 Authorization Code
   *
   * @generated from field: string code = 2;
   */
  code = "";

  /**
   * redirect_uri MUST be identical authenticate request `redirect_uri` value
   *
   * @generated from field: string redirect_uri = 3;
   */
  redirectUri = "";

  constructor(data?: PartialMessage<ExchangeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "oidc.v1.ExchangeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "grant_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "redirect_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExchangeRequest {
    return new ExchangeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExchangeRequest {
    return new ExchangeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExchangeRequest {
    return new ExchangeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExchangeRequest | PlainMessage<ExchangeRequest> | undefined, b: ExchangeRequest | PlainMessage<ExchangeRequest> | undefined): boolean {
    return proto3.util.equals(ExchangeRequest, a, b);
  }
}

/**
 * Spec: [OpenID Connect Core 1.0 Section 3.1.3.3.](http://openid-foundation-japan.github.io/openid-connect-core-1_0.ja.html#TokenResponse)
 *
 * @generated from message oidc.v1.ExchangeResponse
 */
export class ExchangeResponse extends Message<ExchangeResponse> {
  /**
   * Access Token
   *
   * @generated from field: string access_token = 1;
   */
  accessToken = "";

  /**
   * ID Token value associated with the authenticated session
   *
   * @generated from field: string id_token = 2;
   */
  idToken = "";

  /**
   * Token type MUST be `Bearer`, as specified in [RFC 6750](https://www.rfc-editor.org/rfc/rfc6750.htm)
   *
   * @generated from field: string token_type = 3;
   */
  tokenType = "";

  /**
   * Lifetime in seconds of the access token.
   * Requirement level is MUST (Original spec is RECOMMENDED).
   *
   * @generated from field: uint32 expires_in = 4;
   */
  expiresIn = 0;

  /**
   * Refresh token
   *
   * @generated from field: optional string refresh_token = 5;
   */
  refreshToken?: string;

  constructor(data?: PartialMessage<ExchangeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "oidc.v1.ExchangeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "token_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "expires_in", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "refresh_token", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExchangeResponse {
    return new ExchangeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExchangeResponse {
    return new ExchangeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExchangeResponse {
    return new ExchangeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ExchangeResponse | PlainMessage<ExchangeResponse> | undefined, b: ExchangeResponse | PlainMessage<ExchangeResponse> | undefined): boolean {
    return proto3.util.equals(ExchangeResponse, a, b);
  }
}

