// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: oidc/v1/oidc.proto

package oidcv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/p1ass/id/backend/gen/oidc/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// OIDCPrivateServiceName is the fully-qualified name of the OIDCPrivateService service.
	OIDCPrivateServiceName = "oidc.v1.OIDCPrivateService"
)

// OIDCPrivateServiceClient is a client for the oidc.v1.OIDCPrivateService service.
type OIDCPrivateServiceClient interface {
	// Authenticate authenticates the end user and generates OAuth2.0 Authorization Code
	// Possible error code:
	// - InvalidArgument: "invalid_scope"
	// - InvalidArgument: "invalid_request_uri"
	// - InvalidArgument: "unsupported_response_type"
	// - InvalidArgument: "invalid_request"
	// - PermissionDenied: "unauthorized_client"
	// - PermissionDenied: "consent_required"
	Authenticate(context.Context, *connect_go.Request[v1.AuthenticateRequest]) (*connect_go.Response[v1.AuthenticateResponse], error)
	// Exchange exchanges authorization code into access token and ID Token
	// Spec: [OpenID Connect Core 1.0 Section 3.1.3.](http://openid-foundation-japan.github.io/openid-connect-core-1_0.ja.html#TokenEndpoint)
	Exchange(context.Context, *connect_go.Request[v1.ExchangeRequest]) (*connect_go.Response[v1.ExchangeResponse], error)
}

// NewOIDCPrivateServiceClient constructs a client for the oidc.v1.OIDCPrivateService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOIDCPrivateServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) OIDCPrivateServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &oIDCPrivateServiceClient{
		authenticate: connect_go.NewClient[v1.AuthenticateRequest, v1.AuthenticateResponse](
			httpClient,
			baseURL+"/oidc.v1.OIDCPrivateService/Authenticate",
			opts...,
		),
		exchange: connect_go.NewClient[v1.ExchangeRequest, v1.ExchangeResponse](
			httpClient,
			baseURL+"/oidc.v1.OIDCPrivateService/Exchange",
			opts...,
		),
	}
}

// oIDCPrivateServiceClient implements OIDCPrivateServiceClient.
type oIDCPrivateServiceClient struct {
	authenticate *connect_go.Client[v1.AuthenticateRequest, v1.AuthenticateResponse]
	exchange     *connect_go.Client[v1.ExchangeRequest, v1.ExchangeResponse]
}

// Authenticate calls oidc.v1.OIDCPrivateService.Authenticate.
func (c *oIDCPrivateServiceClient) Authenticate(ctx context.Context, req *connect_go.Request[v1.AuthenticateRequest]) (*connect_go.Response[v1.AuthenticateResponse], error) {
	return c.authenticate.CallUnary(ctx, req)
}

// Exchange calls oidc.v1.OIDCPrivateService.Exchange.
func (c *oIDCPrivateServiceClient) Exchange(ctx context.Context, req *connect_go.Request[v1.ExchangeRequest]) (*connect_go.Response[v1.ExchangeResponse], error) {
	return c.exchange.CallUnary(ctx, req)
}

// OIDCPrivateServiceHandler is an implementation of the oidc.v1.OIDCPrivateService service.
type OIDCPrivateServiceHandler interface {
	// Authenticate authenticates the end user and generates OAuth2.0 Authorization Code
	// Possible error code:
	// - InvalidArgument: "invalid_scope"
	// - InvalidArgument: "invalid_request_uri"
	// - InvalidArgument: "unsupported_response_type"
	// - InvalidArgument: "invalid_request"
	// - PermissionDenied: "unauthorized_client"
	// - PermissionDenied: "consent_required"
	Authenticate(context.Context, *connect_go.Request[v1.AuthenticateRequest]) (*connect_go.Response[v1.AuthenticateResponse], error)
	// Exchange exchanges authorization code into access token and ID Token
	// Spec: [OpenID Connect Core 1.0 Section 3.1.3.](http://openid-foundation-japan.github.io/openid-connect-core-1_0.ja.html#TokenEndpoint)
	Exchange(context.Context, *connect_go.Request[v1.ExchangeRequest]) (*connect_go.Response[v1.ExchangeResponse], error)
}

// NewOIDCPrivateServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOIDCPrivateServiceHandler(svc OIDCPrivateServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/oidc.v1.OIDCPrivateService/Authenticate", connect_go.NewUnaryHandler(
		"/oidc.v1.OIDCPrivateService/Authenticate",
		svc.Authenticate,
		opts...,
	))
	mux.Handle("/oidc.v1.OIDCPrivateService/Exchange", connect_go.NewUnaryHandler(
		"/oidc.v1.OIDCPrivateService/Exchange",
		svc.Exchange,
		opts...,
	))
	return "/oidc.v1.OIDCPrivateService/", mux
}

// UnimplementedOIDCPrivateServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOIDCPrivateServiceHandler struct{}

func (UnimplementedOIDCPrivateServiceHandler) Authenticate(context.Context, *connect_go.Request[v1.AuthenticateRequest]) (*connect_go.Response[v1.AuthenticateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("oidc.v1.OIDCPrivateService.Authenticate is not implemented"))
}

func (UnimplementedOIDCPrivateServiceHandler) Exchange(context.Context, *connect_go.Request[v1.ExchangeRequest]) (*connect_go.Response[v1.ExchangeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("oidc.v1.OIDCPrivateService.Exchange is not implemented"))
}
