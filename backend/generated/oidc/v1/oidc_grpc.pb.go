// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: oidc/v1/oidc.proto

package oidcv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OIDCPrivateService_Authenticate_FullMethodName = "/oidc.v1.OIDCPrivateService/Authenticate"
	OIDCPrivateService_Exchange_FullMethodName     = "/oidc.v1.OIDCPrivateService/Exchange"
)

// OIDCPrivateServiceClient is the client API for OIDCPrivateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OIDCPrivateServiceClient interface {
	// Authenticate authenticates the end user and generates OAuth2.0 Authorization Code
	// Possible error code (defined by OAuth2.0 or OpenID Connect):
	// - InvalidArgument: "invalid_scope"
	// - InvalidArgument: "invalid_request_uri"
	// - InvalidArgument: "unsupported_response_type"
	// - InvalidArgument: "invalid_request"
	// - PermissionDenied: "unauthorized_client"
	// - PermissionDenied: "consent_required"
	// Possible error code (defined by Self):
	// - InvalidArgument: "invalid_client_id"
	// - InvalidArgument: "invalid_redirect_uri"
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
	// Exchange exchanges authorization code into access token and ID Token
	// Spec: [OpenID Connect Core 1.0 Section 3.1.3.](http://openid-foundation-japan.github.io/openid-connect-core-1_0.ja.html#TokenEndpoint)
	// Possible error code (defined by OAuth2.0 or OpenID Connect):
	// - InvalidArgument: "invalid_request"
	// - InvalidArgument: "unsupported_grant_type"
	// - InvalidArgument: "invalid_grant"
	// - Unauthenticated: "invalid_client"
	// Possible error code (defined by Self):
	// - InvalidArgument: "invalid_redirect_uri"
	Exchange(ctx context.Context, in *ExchangeRequest, opts ...grpc.CallOption) (*ExchangeResponse, error)
}

type oIDCPrivateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOIDCPrivateServiceClient(cc grpc.ClientConnInterface) OIDCPrivateServiceClient {
	return &oIDCPrivateServiceClient{cc}
}

func (c *oIDCPrivateServiceClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := c.cc.Invoke(ctx, OIDCPrivateService_Authenticate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oIDCPrivateServiceClient) Exchange(ctx context.Context, in *ExchangeRequest, opts ...grpc.CallOption) (*ExchangeResponse, error) {
	out := new(ExchangeResponse)
	err := c.cc.Invoke(ctx, OIDCPrivateService_Exchange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OIDCPrivateServiceServer is the server API for OIDCPrivateService service.
// All implementations must embed UnimplementedOIDCPrivateServiceServer
// for forward compatibility
type OIDCPrivateServiceServer interface {
	// Authenticate authenticates the end user and generates OAuth2.0 Authorization Code
	// Possible error code (defined by OAuth2.0 or OpenID Connect):
	// - InvalidArgument: "invalid_scope"
	// - InvalidArgument: "invalid_request_uri"
	// - InvalidArgument: "unsupported_response_type"
	// - InvalidArgument: "invalid_request"
	// - PermissionDenied: "unauthorized_client"
	// - PermissionDenied: "consent_required"
	// Possible error code (defined by Self):
	// - InvalidArgument: "invalid_client_id"
	// - InvalidArgument: "invalid_redirect_uri"
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error)
	// Exchange exchanges authorization code into access token and ID Token
	// Spec: [OpenID Connect Core 1.0 Section 3.1.3.](http://openid-foundation-japan.github.io/openid-connect-core-1_0.ja.html#TokenEndpoint)
	// Possible error code (defined by OAuth2.0 or OpenID Connect):
	// - InvalidArgument: "invalid_request"
	// - InvalidArgument: "unsupported_grant_type"
	// - InvalidArgument: "invalid_grant"
	// - Unauthenticated: "invalid_client"
	// Possible error code (defined by Self):
	// - InvalidArgument: "invalid_redirect_uri"
	Exchange(context.Context, *ExchangeRequest) (*ExchangeResponse, error)
	mustEmbedUnimplementedOIDCPrivateServiceServer()
}

// UnimplementedOIDCPrivateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOIDCPrivateServiceServer struct {
}

func (UnimplementedOIDCPrivateServiceServer) Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedOIDCPrivateServiceServer) Exchange(context.Context, *ExchangeRequest) (*ExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exchange not implemented")
}
func (UnimplementedOIDCPrivateServiceServer) mustEmbedUnimplementedOIDCPrivateServiceServer() {}

// UnsafeOIDCPrivateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OIDCPrivateServiceServer will
// result in compilation errors.
type UnsafeOIDCPrivateServiceServer interface {
	mustEmbedUnimplementedOIDCPrivateServiceServer()
}

func RegisterOIDCPrivateServiceServer(s grpc.ServiceRegistrar, srv OIDCPrivateServiceServer) {
	s.RegisterService(&OIDCPrivateService_ServiceDesc, srv)
}

func _OIDCPrivateService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OIDCPrivateServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OIDCPrivateService_Authenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OIDCPrivateServiceServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OIDCPrivateService_Exchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OIDCPrivateServiceServer).Exchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OIDCPrivateService_Exchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OIDCPrivateServiceServer).Exchange(ctx, req.(*ExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OIDCPrivateService_ServiceDesc is the grpc.ServiceDesc for OIDCPrivateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OIDCPrivateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oidc.v1.OIDCPrivateService",
	HandlerType: (*OIDCPrivateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _OIDCPrivateService_Authenticate_Handler,
		},
		{
			MethodName: "Exchange",
			Handler:    _OIDCPrivateService_Exchange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oidc/v1/oidc.proto",
}
